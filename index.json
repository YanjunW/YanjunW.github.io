[{"authors":null,"categories":null,"content":"Hi, I am a Ph.D. student in the School of Electrical and Computer Engineering at Purdue University under the supervision of Prof.Xiaokang Qiu.\nMy research area is programming languages, especially with interests on program synthesis, program verification and program analysis. I work on designing frameworks that generate provably-correct programs automatically according to both syntactic constraints and semantic specifications. I also work on techniques that analyze tree-related programs as well as check the correctness of program transformations. My recent research lies at the intersection of programming languages and computer network.\nBefore starting my studies at Purdue, I received my B.Eng. in Electrical Engineering at Huazhong University of Science and Technology, China.\n","date":1602129365,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1602129365,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://YanjunW.github.io/author/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/admin/","section":"author","summary":"Hi, I am a Ph.D. student in the School of Electrical and Computer Engineering at Purdue University under the supervision of Prof.Xiaokang Qiu.\nMy research area is programming languages, especially with interests on program synthesis, program verification and program analysis. I work on designing frameworks that generate provably-correct programs automatically according to both syntactic constraints and semantic specifications. I also work on techniques that analyze tree-related programs as well as check the correctness of program transformations.","tags":null,"title":"","type":"author"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://YanjunW.github.io/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"author","summary":"","tags":null,"title":"Authors","type":"author"},{"authors":["Kangjing Huang","Xiaokang Qiu","Peiyuan Shen","**Yanjun Wang**"],"categories":null,"content":"","date":1592539200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602129365,"objectID":"6ff021434e57d3183a65b741f77a0231","permalink":"https://YanjunW.github.io/publication/gradual-synthesis/","publishdate":"2020-06-19T00:00:00-04:00","relpermalink":"/publication/gradual-synthesis/","section":"publication","summary":"Syntax-guided synthesis (SyGuS) aims to find a program satisfying semantic specification as well as user-provided structural hypotheses. There are two main synthesis approaches: enumerative synthesis, which repeatedly enumerates possible candidate programs and checks their correctness, and deductive synthesis, which leverages a symbolic procedure to construct implementations from specifications. Neither approach is strictly better than the other: automated deductive synthesis is usually very efficient but only works for special grammars or applications; enumerative synthesis is very generally applicable but limited in scalability. In this paper, we propose a cooperative synthesis technique for SyGuS problems with the conditional linear integer arithmetic (CLIA) background theory, as a novel integration of the two approaches, combining the best of the two worlds. The technique exploits several novel divide-and-conquer strategies to split a large synthesis problem to smaller subproblems. The subproblems are solved separately and their solutions are combined to form a final solution. The technique integrates two synthesis engines: a pure deductive component that can efficiently solve some problems, and a height-based enumeration algorithm that can handle arbitrary grammar. We implemented the cooperative synthesis technique, and evaluated it on a wide range of benchmarks. Experiments showed that our technique can solve many challenging synthesis problems not possible before, and tends to be more scalable than state-of-the-art synthesis algorithms.","tags":[],"title":"Reconciling enumerative and deductive program synthesis","type":"publication"},{"authors":["**Yanjun Wang**","Chuan Jiang","Xiaokang Qiu","Sanjay Rao"],"categories":null,"content":"","date":1574053200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602129365,"objectID":"2be16f293fca3c459f4011ce129aeb9f","permalink":"https://YanjunW.github.io/publication/hotnets/","publishdate":"2019-11-18T00:00:00-05:00","relpermalink":"/publication/hotnets/","section":"publication","summary":"While the networking community has extensively tackled network design problems using optimization or other techniques (e.g., in areas such as traffic-engineering, and resource allocation), much of this work focuses on efficiently generating designs assuming well-defined objectives. In this paper, we argue that in practice, the objectives of a network design task may not be easy to specify for an architect. We argue for, and present a structured approach where the objectives of a network design task are learnt through iterative interactions with the architect. Our approach is inspired by a programming-by-examples approach that has seen success in the programming languages community. However, conventional program synthesis techniques do not apply because in our context a user can only provide a relative comparison between multiple choices on which one is more desirable, rather than provide an exact output for a given input. We propose a novel comparative synthesis approach to tackle these challenges. We sketch the approach, present promising preliminary results, and discuss future research questions.","tags":[],"title":"Learning Network Design Objectives Using A Program Synthesis Approach","type":"publication"},{"authors":null,"categories":null,"content":"Dryad_dec is a decidable logic that allows reasoning about tree data-structures with measurements. This logic supports user-defined recursive measure functions based on Max or Sum, and recursive predicates based on these measure functions, such as AVL trees or red-black trees. We prove that the logicâ€™s satisfiability is decidable. The crux of the decidability proof is a small model property which allows us to reduce the satisfiability of Dryad_dec to quantifier-free linear arithmetic theory which can be solved efficiently using SMT solvers. We also show that Dryad_dec can encode a variety of verification and synthesis problems, including natural proof verification conditions for functional correctness of recursive tree-manipulating programs, legality conditions for fusing tree traversals, synthesis conditions for conditional linear-integer arithmetic functions. We developed the decision procedure and successfully solved 220+ Dryad_dec formulae raised from these application scenarios, including verifying functional correctness of programs manipulating AVL trees, red-black trees and treaps, checking the fusibility of height-based mutually recursive tree traversals, and counterexample-guided synthesis from linear integer arithmetic specifications. To our knowledge, Dryad_dec is the first decidable logic that can solve such a wide variety of problems requiring flexible combination of measure-related, data-related and shape-related properties for trees.\nPlease check the preprint link above to see details in the preprint paper (with appendix).\n","date":1550123097,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550196930,"objectID":"c0a348d6b23a7de25c435f00669bc539","permalink":"https://YanjunW.github.io/project/decidable-dryad/","publishdate":"2019-02-14T00:44:57-05:00","relpermalink":"/project/decidable-dryad/","section":"project","summary":"A **decidable** logic for tree data-structures with measurements.","tags":[],"title":"Dryad_dec","type":"project"},{"authors":["**Yanjun Wang**","Jinwei Liu","Dalin Zhang","Xiaokang Qiu"],"categories":null,"content":"","date":1550122332,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602129365,"objectID":"c68e42e6ff804c54da511b86cb25ffd8","permalink":"https://YanjunW.github.io/publication/reasoning-about-recursive-tree-traversals/","publishdate":"2019-02-14T00:32:12-05:00","relpermalink":"/publication/reasoning-about-recursive-tree-traversals/","section":"publication","summary":"","tags":[],"title":"Reasoning About Recursive Tree Traversals","type":"publication"},{"authors":null,"categories":null,"content":"","date":1550121983,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550195037,"objectID":"4817682335134b0c65aa6b41de7a208c","permalink":"https://YanjunW.github.io/project/dryadsynth/","publishdate":"2019-02-14T00:26:23-05:00","relpermalink":"/project/dryadsynth/","section":"project","summary":"A [Syntax-Guided Synthesis (SyGuS)](http://sygus.org/language.html) solver that combines explicit search and symbolic search.","tags":[],"title":"DryadSynth","type":"project"},{"authors":["Xiaokang Qiu","**Yanjun Wang**"],"categories":null,"content":"","date":1546318800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602129365,"objectID":"a2051b0382e44eec62ec4adec1f98d6f","permalink":"https://YanjunW.github.io/publication/decidable-dryad/","publishdate":"2019-01-01T00:00:00-05:00","relpermalink":"/publication/decidable-dryad/","section":"publication","summary":"We present Dryad_dec, a decidable logic that allows reasoning about tree data-structures with measurements. This logic supports user-defined recursive measure functions based on Max or Sum, and recursive predicates based on these measure functions, such as AVL trees or red-black trees. We prove that the logic's satisfiability is decidable. The crux of the decidability proof is a small model property which allows us to reduce the satisfiability of Dryad_dec to quantifier-free linear arithmetic theory which can be solved efficiently using SMT solvers. We also show that Dryad_dec can encode a variety of verification and synthesis problems, including natural proof verification conditions for functional correctness of recursive tree-manipulating programs, legality conditions for fusing tree traversals, synthesis conditions for conditional linear-integer arithmetic functions. We developed the decision procedure and successfully solved 220+ Dryad_dec formulae raised from these application scenarios, including verifying functional correctness of programs manipulating AVL trees, red-black trees and treaps, checking the fusibility of height-based mutually recursive tree traversals, and counterexample-guided synthesis from linear integer arithmetic specifications. To our knowledge, Dryad_dec is the first decidable logic that can solve such a wide variety of problems requiring flexible combination of measure-related, data-related and shape-related properties for trees.","tags":null,"title":"A Decidable Logic for Tree Data-Structures with Measurements","type":"publication"}]